// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "balancer_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// apg2
vec apg2(Function f, Function grad_f, Function prox_h, int dim, int max_it, double eps, double beta, bool accel);
RcppExport SEXP _balancer_apg2(SEXP fSEXP, SEXP grad_fSEXP, SEXP prox_hSEXP, SEXP dimSEXP, SEXP max_itSEXP, SEXP epsSEXP, SEXP betaSEXP, SEXP accelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    Rcpp::traits::input_parameter< Function >::type grad_f(grad_fSEXP);
    Rcpp::traits::input_parameter< Function >::type prox_h(prox_hSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type accel(accelSEXP);
    rcpp_result_gen = Rcpp::wrap(apg2(f, grad_f, prox_h, dim, max_it, eps, beta, accel));
    return rcpp_result_gen;
END_RCPP
}
// apg
vec apg(lptr loss_ptr, gptr grad_ptr, pptr prox_ptr, List loss_opts, int dim, int max_it, double eps, double beta);
RcppExport SEXP _balancer_apg(SEXP loss_ptrSEXP, SEXP grad_ptrSEXP, SEXP prox_ptrSEXP, SEXP loss_optsSEXP, SEXP dimSEXP, SEXP max_itSEXP, SEXP epsSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< lptr >::type loss_ptr(loss_ptrSEXP);
    Rcpp::traits::input_parameter< gptr >::type grad_ptr(grad_ptrSEXP);
    Rcpp::traits::input_parameter< pptr >::type prox_ptr(prox_ptrSEXP);
    Rcpp::traits::input_parameter< List >::type loss_opts(loss_optsSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(apg(loss_ptr, grad_ptr, prox_ptr, loss_opts, dim, max_it, eps, beta));
    return rcpp_result_gen;
END_RCPP
}
// apg3
vec apg3(Function grad_f, Function prox_h, int dim, int max_it, double eps, double beta, bool accel, double alpha);
RcppExport SEXP _balancer_apg3(SEXP grad_fSEXP, SEXP prox_hSEXP, SEXP dimSEXP, SEXP max_itSEXP, SEXP epsSEXP, SEXP betaSEXP, SEXP accelSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type grad_f(grad_fSEXP);
    Rcpp::traits::input_parameter< Function >::type prox_h(prox_hSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type accel(accelSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(apg3(grad_f, prox_h, dim, max_it, eps, beta, accel, alpha));
    return rcpp_result_gen;
END_RCPP
}
// balancing_loss
double balancing_loss(vec theta, List opts);
RcppExport SEXP _balancer_balancing_loss(SEXP thetaSEXP, SEXP optsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type opts(optsSEXP);
    rcpp_result_gen = Rcpp::wrap(balancing_loss(theta, opts));
    return rcpp_result_gen;
END_RCPP
}
// make_balancing_loss
lptr make_balancing_loss();
RcppExport SEXP _balancer_make_balancing_loss() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_balancing_loss());
    return rcpp_result_gen;
END_RCPP
}
// make_balancing_grad
gptr make_balancing_grad();
RcppExport SEXP _balancer_make_balancing_grad() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_balancing_grad());
    return rcpp_result_gen;
END_RCPP
}
// no_prox
arma::vec no_prox(arma::vec theta, double t);
RcppExport SEXP _balancer_no_prox(SEXP thetaSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(no_prox(theta, t));
    return rcpp_result_gen;
END_RCPP
}
// make_no_prox
pptr make_no_prox();
RcppExport SEXP _balancer_make_no_prox() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_no_prox());
    return rcpp_result_gen;
END_RCPP
}
// prox_l1
vec prox_l1(vec x, double lam);
RcppExport SEXP _balancer_prox_l1(SEXP xSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_l1(x, lam));
    return rcpp_result_gen;
END_RCPP
}
// make_prox_l1
pptr make_prox_l1();
RcppExport SEXP _balancer_make_prox_l1() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_prox_l1());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_balancer_apg2", (DL_FUNC) &_balancer_apg2, 8},
    {"_balancer_apg", (DL_FUNC) &_balancer_apg, 8},
    {"_balancer_apg3", (DL_FUNC) &_balancer_apg3, 8},
    {"_balancer_balancing_loss", (DL_FUNC) &_balancer_balancing_loss, 2},
    {"_balancer_make_balancing_loss", (DL_FUNC) &_balancer_make_balancing_loss, 0},
    {"_balancer_make_balancing_grad", (DL_FUNC) &_balancer_make_balancing_grad, 0},
    {"_balancer_no_prox", (DL_FUNC) &_balancer_no_prox, 2},
    {"_balancer_make_no_prox", (DL_FUNC) &_balancer_make_no_prox, 0},
    {"_balancer_prox_l1", (DL_FUNC) &_balancer_prox_l1, 2},
    {"_balancer_make_prox_l1", (DL_FUNC) &_balancer_make_prox_l1, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_balancer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
