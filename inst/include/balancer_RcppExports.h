// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_balancer_RCPPEXPORTS_H_GEN_
#define RCPP_balancer_RCPPEXPORTS_H_GEN_

#include "balancer_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace balancer {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("balancer", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("balancer", "_balancer_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in balancer");
            }
        }
    }

    inline mat apg(gptr grad_ptr, pptr prox_ptr, List loss_opts, List prox_opts, mat x, int max_it, double eps, double alpha, double beta, bool accel, bool verbose) {
        typedef SEXP(*Ptr_apg)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_apg p_apg = NULL;
        if (p_apg == NULL) {
            validateSignature("mat(*apg)(gptr,pptr,List,List,mat,int,double,double,double,bool,bool)");
            p_apg = (Ptr_apg)R_GetCCallable("balancer", "_balancer_apg");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_apg(Shield<SEXP>(Rcpp::wrap(grad_ptr)), Shield<SEXP>(Rcpp::wrap(prox_ptr)), Shield<SEXP>(Rcpp::wrap(loss_opts)), Shield<SEXP>(Rcpp::wrap(prox_opts)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(eps)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(beta)), Shield<SEXP>(Rcpp::wrap(accel)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline List apg_warmstart(gptr grad_ptr, pptr prox_ptr, List loss_opts, List prox_opts, vec lams, mat x, int max_it, double eps, double alpha, double beta, bool accel, bool verbose) {
        typedef SEXP(*Ptr_apg_warmstart)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_apg_warmstart p_apg_warmstart = NULL;
        if (p_apg_warmstart == NULL) {
            validateSignature("List(*apg_warmstart)(gptr,pptr,List,List,vec,mat,int,double,double,double,bool,bool)");
            p_apg_warmstart = (Ptr_apg_warmstart)R_GetCCallable("balancer", "_balancer_apg_warmstart");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_apg_warmstart(Shield<SEXP>(Rcpp::wrap(grad_ptr)), Shield<SEXP>(Rcpp::wrap(prox_ptr)), Shield<SEXP>(Rcpp::wrap(loss_opts)), Shield<SEXP>(Rcpp::wrap(prox_opts)), Shield<SEXP>(Rcpp::wrap(lams)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(eps)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(beta)), Shield<SEXP>(Rcpp::wrap(accel)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_balancer_RCPPEXPORTS_H_GEN_
